


#+title:  開発ノート
#+author: kenjirofukuda@gmail.com
#+date: 2024-01-02

* TODO 描画時間の削減
一番巨大なBandgap の描画に時間がかかりすぎている。
GNUstep 版は 280 ms から 300 ms である。
** TODO 長期的な削減
オフスクリーン描画の実装
ビューポートが変更されない限りは、前回描画を使い回せるので再描画を発生させないようにする。
ホイールズームやウィンドウサイズ変更などの頻繁な描画要求時の省略描画を実装する。これは Pharo版で実装済みなのでそれに習ってみる。
** DONE 単純な削減
| 初回測定                | 800 ms         |
| 描画周りのDebugLn 削除   | 400 ms         |
| PenのSave Restore 廃止 | 227 から 240 ms |
やっと、GNUstep 版を追い越した。
* DONE キーナビゲーション
以前の勘違いを克服して実装した。

ゴテゴテプロパティが追加されたコントロールは嫌だったので TPanel 配下に TViewPortを実装したらOnKeyUpが可能となり、そのままイベントプロシジャを割当てるだけで済ませることができた。
** 以前の勘違い
GNUstep バージョンでは以下の割当を行い、なんの問題もなく実現している。
NSView 配下なら NSResponder 配下なのでイベントにフックをかけるのは造作もない。
+-------+-----------------+
| 右矢印 | View Move Right |
+-------+-----------------+
| 左矢印 | View Mode Left  |
+-------+-----------------+
| 上矢印 | View Move Up    |
+-------+-----------------+
| 下矢印 | View Move Down  |
+-------+-----------------+
| Home  | Fit             |
+-------+-----------------+
| +     | Zoom 2.0        |
+-------+-----------------+
| -     | Zoom 0.5        |
+-------------------------+
ところが Lazarus でキーイベントを拾えるのかを調べてみたらかなりのハードルのようである。

*** TPaintBox 上で、キーエベントを取得
解決のヒントになると思われるサイトが以下である。
https://www.petitmonte.com/bbs/answers?question_id=1503

* DONE ファイル開設ダイアログにて、最後に開いたディレクトリに誘導
Windwosは開設ダイアログが最後にアクセスした場所を覚えているが Linux(gtk2) ではこの挙動を期待できない。よって最後に保存した場所を記録しておき、アプリケーションセッション開始時にこれを復元する。

TJSOPNPropStorageを用いて、比較的かんたんに解決することができた。
* DONE 回転変換の修正 

変換が意図した挙動を示さないため、BGRATransform の AffineMatrixRotationRadを調べてみたら
-1 をかける位置が意図したものと異なっていいたのでハードコードした。

#+begin_src opascal
  function AffineMatrixRotationRad(AngleCCW: single): TAffineMatrix;
  begin
    Result := AffineMatrix(cos(AngleCCW), sin(AngleCCW), 0,
                          -sin(AngleCCW), cos(AngleCCW), 0);
  end;

#+end_src


#+begin_src opascal
  Result := AffineMatrix(cos(AngleCCW), -sin(AngleCCW), 0,
                         sin(AngleCCW),  cos(AngleCCW), 0);
#+end_src

* DONE Windows 64bit で実行するとArcTan2でオーバーフロー例外を起こす。

https://forum.lazarus.freepascal.org/index.php?topic=60180.45
の記事をきっかけに
https://gitlab.com/freepascal.org/fpc/source/-/issues/39861
に至った。

LinuxのArcTan2を追跡すると
#+begin_src opascal
{$ifdef FPC_HAS_TYPE_EXTENDED}
{$define FPC_MATH_HAS_ARCTAN2}
function arctan2(y,x : float) : float;assembler;
  asm
     fldt y
     fldt x
     fpatan
     fwait
  end;
#+end_Src
に行き当たる。
これは、FPC _ HAS _ TYPE _ EXTENDED  が有効なため
ダイレクトに、アセンブラコールされている。

Windows のArcTan2 を追跡するとフォーラムにあったバグ含みのコードに行き当たる。
#+begin_src opascal
{$ifndef FPC_MATH_HAS_ARCTAN2}
function arctan2(y,x : float) : float;
  begin
    if (x=0) then
      begin
        if y=0 then
          arctan2:=0.0
        else if y>0 then
          arctan2:=pi/2
        else if y<0 then
          arctan2:=-pi/2;
      end
    else
      ArcTan2:=ArcTan(y/x);
    if x<0.0 then
      ArcTan2:=ArcTan2+pi;
    if ArcTan2>pi then
      ArcTan2:=ArcTan2-2*pi;
  end;
{$endif FPC_MATH_HAS_ARCTAN2}
#+end_src

最新バージョンをインストールしているのに、バグ修正が反映されていないのはなぜなのかは不明

ちなみに、修正されたコードは次のようになる。
#+begin_src opascal
function arctan2(y,x : float) : float;
  begin
    if (x=0) then
      begin
        if y=0 then
          result:=0.0
        else if y>0 then
          result:=pi/2
        else                 //<--- 2: removed last if check
          result:=-pi/2;
      end
    else begin                    //<--- 1:added "begin"
      if X > 0 then               //<--- 3: rewritten avoding unecessary sum+subtract
        result:=ArcTan(y/x)
      else
        if Y < 0.0 then
          result:=ArcTan(y/x)-pi
        else          
          result:=ArcTan(y/x)+pi;
    end;                        //<---- 1: added "end"    
  end;  
#+end_src
提案された修正コードを用いても範囲例外は発生した。残念

対象要素を見る限り、単なる左向きの水平線である。
#+begin_src
Self = TGdsPath( {TGdsPath}
  private
  FOUTLINECOORDS: nil;
  FPATHTYPE: 0;
  FWIDTH: 10;
  {TGDSELEMENT}
  private
  FCOORDS: ((266.5, 289), (0, 289));
  FLAYER: 22;
  FDATATYPE: 0;
  FEXTENTBOUNDS:   ( ORIGIN:     ( X: 0;       Y: 289);
    CORNER:     ( X: 266.5;       Y: 289));
  FEXTENTBOUNDSPTR: $0000000005FB3AA0^: ();
  {TGDSOBJECT}
  private
  FPARENT: TGDSOBJECT($0000000005FAE800);
  PARENT: TGDSOBJECT($0000000005FAE800);
  {TOBJECT}
  private
  _vptr$TOBJECT: $000000010027AF78^: Error: Unknown data)
  #+end_src
あ、2頂点の単なる線分に対して3頂点の比較関数が呼ばれていることがそのもののバグであった。

修正前
#+begin_src opascal
for i := 1 to numPoints do     
#+end_src
修正後
#+begin_src opascal
for i := 1 to numPoints - 1 do     
#+end_src

また、実数値の比較を
#+begin_src opascal
(x = 0)
#+end_src
#+begin_src opascal
const
  eps = 1e-8;
SameValue(x, 0.0, eps)
#+end_src
などではなく
等で統一
このインデックスオーバーを修正してこの問題は終了とする。



